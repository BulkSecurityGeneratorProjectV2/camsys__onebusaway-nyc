<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2011 Metropolitan Transportation Authority

    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy of
    the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations under
    the License.

-->
<html xmlns:jsp="http://java.sun.com/JSP/Page"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:form="http://www.springframework.org/tags/form">
<jsp:directive.page contentType="text/html" />
<head>
<title>Vehicle Location Simulations - Block</title>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"><!-- //prevent jspx minimization --></script>
<script type="text/javascript" src="http://openlayers.org/api/OpenLayers.js"><!-- //prevent jspx minimization --></script>

<script type="text/javascript">
/* <![CDATA[ */
var OBA = window.OBA || {};

OBA.Debug = function() {
	var map = null;
	var markers = null;
	var stopMarkers = null;
	var inferredMarkers = null;
	var addedMarkers = null;
	var routes = null;
	var popup = null;
	var feature = null;
	var searchStartTime = null;
	var searchEndTime = null;
	
	var tripsByBlockId = null;
	
	function decodePolyline(encoded) {
		var len = encoded.length;
		var index = 0;
		var array = [];
		var lat = 0;
		var lng = 0;

		while(index < len) {
			var b;
			var shift = 0;
			var result = 0;
			do {
				b = encoded.charCodeAt(index++) - 63;
				result |= (b & 0x1f) << shift;
				shift += 5;
			} while (b >= 0x20);
			var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
			lat += dlat;

			shift = 0;
			result = 0;
			do {
				b = encoded.charCodeAt(index++) - 63;
				result |= (b & 0x1f) << shift;
				shift += 5;
			} while (b >= 0x20);
			var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
			lng += dlng;

			array.push([lat * 1e-5, lng * 1e-5]);
		}

		return array;
	}
	
	/*
	 * Move a popup with a drag.
	 *
	 * @author Matt Walker
	 * @class
	 */
	OpenLayers.Control.DragPopup = OpenLayers.Class(OpenLayers.Control, {

	    down: false,

	    popPnt: null,

	    mapPnt: null,

	    popup: null,

	    docMouseUpProxy: null,

	    /**
	     * Constructor: OpenLayers.Control.DragPopup
	     * Create a new control to drag a popup.
	     *
	     * Parameters:
	     * @param {OpenLayers.Popup} popup
	     * @param {Object} options
	     */
	    initialize: function(popup, options) {
	        OpenLayers.Control.prototype.initialize.apply(this, [options]);
	        this.popup = popup;
	        this.popup.events.register('mousedown', this, this.mouseDown);
	        this.popup.events.register('mouseup', this, this.mouseUp);
	        this.popup.events.register('mousemove', this, this.mouseMove);
	        // Define a function bound to this used to listen for
	        // document mouseout events
	        this.docMouseUpProxy = OpenLayers.Function.bind(this.mouseUp, this);
	    },

	    /**
	     * Method: setMap
	     * Set the map property for the control.
	     *
	     * Parameters:
	     * map - {<openlayers.map>} The controls map.
	     */
	    setMap: function(map) {
	        OpenLayers.Control.prototype.setMap.apply(this, [map]);
	        this.map.events.register('mousemove', this, this.mouseMove);
	    },

	    mouseDown: function(evt) {
	        //console.log('mouseDown');
	        this.down = true;
	        this.popPnt = this.popup.events.getMousePosition(evt);
	        OpenLayers.Event.observe(document, 'mouseup', this.docMouseUpProxy);
	        OpenLayers.Event.stop(evt);
	    },

	    mouseUp: function(evt) {
	        //console.log('mouseUp');
	        this.down = false;
	        OpenLayers.Event.stopObserving(document, 'mouseup', this.docMouseUpProxy);
	        OpenLayers.Event.stop(evt);
	    },

	    mouseOut: function(evt) {
	        //console.log('map.mouseOut');
	        this.down = false;
	        OpenLayers.Event.stop(evt);
	    },

	    mouseMove: function(evt) {
	        //console.log('mouseMove');
	        if (this.down) {
	            var mapPntPx = this.map.events.getMousePosition(evt);
	            mapPntPx = mapPntPx.add((this.popPnt.x*-1), (this.popPnt.y*-1));
	            this.popup.lonlat = this.map.getLonLatFromViewPortPx(mapPntPx);
	            this.popup.updatePosition();
	        }
	        OpenLayers.Event.stop(evt);
	    },

	    destroy: function() {
	        // Remove listeners
	        this.popup.events.unregister('mousedown', this, this.mouseDown);
	        this.popup.events.unregister('mouseup', this, this.mouseUp);
	        this.popup.events.unregister('mousemove', this, this.mouseMove);
	        this.map.events.unregister('mousemove', this, this.mouseMove);
	        // Clear object references
	        this.popup = null;
	        this.popPnt = null;
	        // allow our superclass to tidy up
	        OpenLayers.Control.prototype.destroy.apply(this, []);
	    },

	    /** @final @type String */
	    CLASS_NAME: "OpenLayers.Control.DragPopup"
	});	
	
	function getParameterByName(name, defaultValue) {
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp(regexS);
		var results = regex.exec(window.location.href);
		if(results == null) {
			return defaultValue;
		} else {
			return decodeURIComponent(results[1].replace(/\+/g, " "));
		}
	}
	
	function showRecordsOnMap(min_time, max_time) {
		if(markers !== null) {
			markers.clearMarkers();
		}
		if (stopMarkers !== null) {
			stopMarkers.clearMarkers();
		}
		if (inferredMarkers !== null) {
			inferredMarkers.clearMarkers();
		}
		if (addedMarkers !== null) {
			addedMarkers.clearMarkers();
		}
		
		var	points = [];
		
		jQuery.ajax({
			url: "vehicle-location-simulation!task-result-records-json.do?taskId=" + getParameterByName("taskId"),
			dataType: "json",
			success: function(data) {
				if(data.records === null) {
					alert("No records were found for this task.");
					return;
				}

				var i = -1;
				jQuery.each(data.records, function(recordIndex, record) {
					
          i++;
          
					// filter out
					if(min_time !== null && max_time !== null 
							&& min_time !== "" && max_time !== "") {
						
					  if(i < parseInt(min_time)) {
						  return;
					  }
						if(i > parseInt(max_time)) {
						  return;
					  }
					} 
					
				  if (searchEndTime === null
						  || parseInt(record.timestampAsDate) > searchEndTime)
					  searchEndTime = parseInt(record.timestampAsDate);
				  if (searchStartTime === null
						  || parseInt(record.timestampAsDate) < searchStartTime)
					  searchStartTime = parseInt(record.timestampAsDate);
					
          var size = new OpenLayers.Size(20,20);
          var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
          
	        var point = new OpenLayers.LonLat(record.lon, record.lat);
          var icon_url = 'http://www.openstreetmap.org/openlayers/img/marker.png';
          var proj = new OpenLayers.Projection("EPSG:4326");
          point.transform(proj, map.getProjectionObject());
          
          var wgsPoint = new OpenLayers.Geometry.Point(record.lon, record.lat);
          var proj = new OpenLayers.Projection("EPSG:4326");
          var realpoint = wgsPoint.transform(proj, map.getProjectionObject());
          
              
          var markerText = {
        		recordNum: i,
          	inferredTripId: "NA",
          	timestampAsDate: "NA",
          	inferredPhase: "NA",
          	status: "default",
          	dsc: "NA",
          	inferredDsc: "NA",
          	reportedRunId: "NA",
          	inferredRunId: "NA",
          	schedDeviation: "NA",
          	other: "",
          	inferredLatLon: "",
          	timestamp: "",
          	inferredSchedTime: "",
          	inferredDAB: "",
          	toString: function () {
          		return "record #: " + this.recordNum + "<br/>"
          		 + "timestamp:" + this.timestampAsDate + "<br/>"
          		 + "dsc: " + this.dsc + "<br/>"
          		 + "reportedRunId: " + this.reportedRunId + "<br/>"
          		 + "inferredTripId:" + this.inferredTripId + "<br/>"
          		 + "inferredPhase: " + this.inferredPhase + "(" + this.status + ")" + "<br/>"
          		 + "inferredDsc: " + this.inferredDsc + "<br/>"
          		 + "inferredRunId: " + this.inferredRunId + "<br/>"
          		 + "inferredSchedTime: " + this.inferredSchedTime + "<br/>"
          		 + "schedDeviation: " + Math.round(this.schedDeviation) + " (mins)<br/>"
          		 + "inferredLatLon: " + this.inferredLatLon + "<br/>"
          		 + "inferredDAB: " + this.inferredDAB + "<br/>"
          		 + this.other;
          	}
          };
          
          var schedTime = 0;
          var currentTime = null;
          var serviceDate = null;
          var inferredLat = null;
          var inferredLon = null;
          
					jQuery.each(record, function(property, value) {
						if (value !== null) {
							
							if(property === "inferredTripId") {
								markerText.inferredTripId = "<a name='trip' href='#'>" + value + "</a>";
							} else if(property === "timestampAsDate") {
								currentTime = value;
								formattedTime = new Date(value);
								markerText.timestampAsDate = "<a name='trip_time_select' href='#'>" + formattedTime.toISOString() + "</a>";
							} else if (property === "vehicleId"){
								markerText.other += property + ": " + value.agencyId + "_" 
								 + value.id + "<br/>";
							} else if (property === "inferredPhase") {
								markerText.inferredPhase = value;
								
								if (value.indexOf("PROGRESS") != -1) {
									icon_url = 'http://www.openstreetmap.org/openlayers/img/marker-green.png';
								} else if (value.indexOf("LAYOVER") != -1) {
									icon_url = 'http://www.openstreetmap.org/openlayers/img/marker-blue.png';
								} 
							} else if (property === "dsc") {
								markerText.dsc = value;
							} else if (property === "inferredStatus") {
								markerText.status = value;
								if (value.indexOf("deviated") != -1) {
									icon_url = 'http://www.openstreetmap.org/openlayers/marker-red-center.png';
								}
							} else if (property === "inferredDsc") {
								markerText.inferredDsc = value;
							} else if (property === "reportedRunId") {
								markerText.reportedRunId = value;
							} else if (property === "inferredRunId") {
								markerText.inferredRunId = value;
							} else if (property.indexOf("Set") == -1
									&& !isNaN(value)){
								
								if (property === "inferredBlockLat" && value != record.lat) {
									inferredLat = value;
								} else if (property === "inferredBlockLon" && value != record.lon) {
									inferredLon = value;
								} else if (property === "inferredDistanceAlongBlock") {
									markerText.inferredDAB = value;
								} else if (property === "inferredServiceDate") {
									schedTime += value;
									serviceDate = value;
								} else if (property === "inferredScheduleTime") {
									schedTime += value*1000;
								} 
							} 
							
						}
					});
					
					if (currentTime !== null) {
						markerText.schedDeviation = (schedTime - currentTime)/(1000*60);
					}
					var schedAsDate = new Date(schedTime); 
					markerText.inferredSchedTime = schedAsDate.toISOString();
					
          var icon = new OpenLayers.Icon(icon_url,size,offset);
          var marker = new OpenLayers.Marker(point, icon);
          markers.addMarker(marker);
          
	        var inferredMarker = null; 
          if (inferredLon !== null && inferredLat !== null) {
	          var inferredPoint = new OpenLayers.LonLat(inferredLon, inferredLat);
		        var inferredProj = new OpenLayers.Projection("EPSG:4326");
	          inferredPoint.transform(inferredProj, map.getProjectionObject());
	          var inferredIcon = new OpenLayers.Icon('http://www.openstreetmap.org/openlayers/img/marker-gold.png',size,offset);
	          inferredMarker = new OpenLayers.Marker(inferredPoint, inferredIcon);
	          inferredMarkers.addMarker(inferredMarker);
	          markerText.inferredLatLon = "<a name='inferredLoc' href='#'>" + inferredLat + "," + inferredLon + "</a>";
	          inferredMarker.display(false);
			      inferredMarker.displayed = false;
          } 
          
          
          points.push(realpoint);
          
          marker.events.register("mousedown", marker, function(event) {
	          feature = new OpenLayers.Feature(markers, point);	
						feature.data.popupSize = new OpenLayers.Size(500, 300);
	          popup = feature.createPopup(true);
	          popup.setContentHTML(markerText.toString());
	          var new_popup = new OpenLayers.Control.DragPopup(popup);
	          markers.map.addPopup(popup);
	          markers.map.addControl(new_popup);
	          popup.keepInMap = false;
		        popup.moveTo = function() {
		        	if (new_popup.down) {
			        	OpenLayers.Popup.prototype.moveTo.apply(this, arguments);
		        	} else {
			        	OpenLayers.Popup.Anchored.prototype.moveTo.apply(this, arguments);
		        	}
	        	}
		                
	          var tripLink = jQuery(popup.contentDiv).find("a[name='trip']");
	          tripLink.click(function(e) {
	          	e.preventDefault();
	
	          	selectTrip(jQuery(this).text(), serviceDate);
	          });
	          
	          var tripLink = jQuery(popup.contentDiv).find("a[name='trip_time_select']");
	          tripLink.click(function(e) {
	          	e.preventDefault();
	          	jQuery("#trip_time").val(jQuery(this).text());
	          });
	          
	          var inferredLink = jQuery(popup.contentDiv).find("a[name='inferredLoc']");
	          inferredLink.click(function(e) {
	          	e.preventDefault();
							if (inferredMarker !== null) {
		          	if (inferredMarker.displayed) {
			          	inferredMarker.display(false);
			          	inferredMarker.displayed = false;
		          	} else {
			          	inferredMarker.display(true);
			          	inferredMarker.displayed = true;
		          	}
							}
	          });
	
// 						if (marker.inferredMarker !== null) {
// 	          	if (marker.inferredMarker.onScreen()) {
// 		          	marker.inferredMarker.display(false);
// 	          	} else {
// 		          	marker.inferredMarker.display(true);
// 	          	}
// 						}
          	
            OpenLayers.Event.stop(event);
	        });
		            
				});

				if(i > 0) {
          map.zoomToExtent(markers.getDataExtent());
			    var style = {
			        strokeColor: "#000000",
			        strokeOpacity: 0.30,
			        strokeWidth: 3
			    };
			    var polyline = new OpenLayers.Geometry.LineString(points);
			    var lineFeature = new OpenLayers.Feature.Vector(polyline, null, style);
			    obslines.addFeatures([lineFeature]);
				}
				

			}
		});
	}
	
	function addPoint(lat, lon) {
     var size = new OpenLayers.Size(40,40);
     var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
     var point = new OpenLayers.LonLat(lon, lat);
     var proj = new OpenLayers.Projection("EPSG:4326");
     point.transform(proj, map.getProjectionObject());
     var icon = new OpenLayers.Icon('http://maps.google.com/mapfiles/ms/icons/orange-dot.png',size,offset);
     addedMarker = new OpenLayers.Marker(point, icon);
     addedMarkers.addMarker(addedMarker);
	}
	
	function selectTrip(selectedTripId, serviceDate) {
		if(typeof selectedTripId === 'undefined' 
				|| typeof selectedTripId === 'object') {
			var selectedTrip = jQuery("#trips option:selected");
			selectedTripId = selectedTrip.val();
			if (typeof selectedTripId === 'undefined')
				return;
		}
		
		jQuery.ajax({
			url: "vehicle-location-simulation!points-for-trip-id.do?tripId=" + selectedTripId,
			dataType: "json",
			success: function(data) {
	      var rawPoints = decodePolyline(data.points);
	
	      var points = [];
	      for(var i = 0; i < rawPoints.length; i++) {
	          var wgsPoint = new OpenLayers.Geometry.Point(rawPoints[i][1], rawPoints[i][0]);
	          var proj = new OpenLayers.Projection("EPSG:4326");
	          var point = wgsPoint.transform(proj, map.getProjectionObject());
	          points.push(point);
	      }
	
	      if(points.length === 0) {
	          return;
	      }
	
	      var style = {
	          strokeColor: "#00FF00",
	          strokeOpacity: 0.80,
	          strokeWidth: 5
	      };
	
	      var polyline = new OpenLayers.Geometry.LineString(points);
	      var lineFeature = new OpenLayers.Feature.Vector(polyline, null, style);
	      routes.addFeatures([lineFeature]);
	      
// 	      map.zoomToExtent(routes.getDataExtent());
			}
		});		
		
		jQuery.ajax({
			url: "vehicle-location-simulation!stops-for-trip-id.do?tripId=" + selectedTripId,
			dataType: "json",
			success: function(data) {
				
	      for(var i = 0; i < data.stopTimes.length; i++) {
	        var size = new OpenLayers.Size(26,26);
	        var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
	    	  var stop = data.stopTimes[i];
          var point = new OpenLayers.LonLat(stop.stop.lon, stop.stop.lat);
	        var proj = new OpenLayers.Projection("EPSG:4326");
          point.transform(proj, map.getProjectionObject());
          
          if (stop.stop.direction === null)
        	  stop.stop.direction = "unknown";
          var icon_url = 'img/stop/stop-' + stop.stop.direction + '.png';
          var icon = new OpenLayers.Icon(icon_url,size,offset);
          var marker = new OpenLayers.Marker(point, icon);
          
          stopMarkers.addMarker(marker);
          
          var html = null;
          html = "trip:" + selectedTripId + "<br/>";
          if (serviceDate !== null
        		  && serviceDate !== undefined) {
	          var dispTime = new Date(serviceDate + stop.arrivalTime*1000);
	          html += "arrivalTime=" + dispTime.toISOString() + "<br/>"; 
          } else {
	          var stopTimeHour = Math.round(stop.arrivalTime / 3600);
	          var stopTimeMin = Math.round((stop.arrivalTime / 60)%60);
	          html += "arrivalTime=" + stopTimeHour + ":" + stopTimeMin + "<br/>";
          }
          html += "id:" + stop.stop.id + "<br/>";
          html += "distance:" + stop.distanceAlongTrip + "<br/>";
          
          /*
          * wtf, closure issue in for loop...
          */
          (function(point, html) {
        	  marker.events.register("mousedown", marker, function(event) {
	        	  var feature = new OpenLayers.Feature(stopMarkers, point);	
							feature.data.popupSize = new OpenLayers.Size(500, 100);
		          popup = feature.createPopup(true);
		          popup.setContentHTML(html);
		          var new_popup = new OpenLayers.Control.DragPopup(popup);
		          stopMarkers.map.addPopup(popup);
		          stopMarkers.map.addControl(new_popup);
		          popup.keepInMap = false;
			        popup.moveTo = function() {
			        	if (new_popup.down) {
				        	OpenLayers.Popup.prototype.moveTo.apply(this, arguments);
			        	} else {
				        	OpenLayers.Popup.Anchored.prototype.moveTo.apply(this, arguments);
			        	}
		        	}
	            OpenLayers.Event.stop(event);
		        });
          })(point, html);
				}
			}
		});		
	}
	
	function initTripList() {
		var selectedBlock = jQuery("#blocks option:selected");
		var tripList = jQuery("#trips");
		tripList.empty();

		var selectedBlockId = selectedBlock.val();
		
		if (!(selectedBlockId === undefined)) {
			jQuery.each(tripsByBlockId[selectedBlockId], function(_, tripId) {
				var option = jQuery("<option>" + tripId + "</option>");
				option.attr("value", tripId);
				tripList.append(option);
			})
		}

		tripList.change(selectTrip);				
	}
	
	function initBlockList() {
		var selectedRoute = jQuery("#routes option:selected");
		var selectedRouteId = selectedRoute.val();
		
		var tripList = jQuery("#trips");
		tripList.empty();

		var time = jQuery("#trip_time").val();
		if (time === "")
			return;
    var ts = new Date(time.replace(" ", "T"));
    var msepoch = ts.getTime();
		jQuery.ajax({
			url: "vehicle-location-simulation!active-blocks-for-route-json.do?routeId=" + selectedRouteId 
					+ "&timestamp=" + msepoch,
			dataType: "json",
			success: function(data) {
				tripsByBlockId = data.blocks;

				var blockList = jQuery("#blocks");
				blockList.empty();

				jQuery.each(data.blocks, function(blockId, trips) {
					var option = jQuery("<option>" + blockId + "</option>");
					option.attr("value", blockId);
					blockList.append(option);
				})

				blockList.change(initTripList);				
			}
		});
	}
	
	function initRouteList() {
		jQuery.ajax({
			url: "vehicle-location-simulation!active-routes-json.do",
			dataType: "json",
			success: function(data) {
				var routeList = jQuery("#routes");
				routeList.empty();

				jQuery.each(data.routes, function(_, routeId) {
					var option = jQuery("<option>" + routeId + "</option>");
					option.attr("value", routeId);
					routeList.append(option);
				});

				routeList.change(initBlockList);				
			}
		});
	}
	
	return {
		initialize: function() {
			
			showRecordsOnMap(null, null);
			initRouteList();
			
			var apiKey = "AqTGBsziZHIJYYxgivLBf0hVdrAk9mWO5cQcb8Yux8sW5M8c8opEC2lZqKR1ZZXf";

			map = new OpenLayers.Map('map');
      stopMarkers = new OpenLayers.Layer.Markers("StopMarkers");
      inferredMarkers = new OpenLayers.Layer.Markers("InferredMarkers");
      addedMarkers = new OpenLayers.Layer.Markers("AddedMarkers");
      markers = new OpenLayers.Layer.Markers("Markers");
      routes = new OpenLayers.Layer.Vector("Routes");
      obslines = new OpenLayers.Layer.Vector("ObsLines");
            
      var road = new OpenLayers.Layer.Bing({
			    key: apiKey,
			    type: "Road",
			    metadataParams: {mapVersion: "v1"}
			});
      
			map.addLayers([road, routes, obslines, stopMarkers, inferredMarkers, addedMarkers, markers]);
			map.addControl(new OpenLayers.Control.LayerSwitcher());
			
			map.setCenter(new OpenLayers.LonLat(-74.081154, 40.639228).transform(
			    new OpenLayers.Projection("EPSG:900913"),
			    map.getProjectionObject()
			), 11);
			
			scale = new OpenLayers.Control.ScaleLine();
			scale.geodesic = true;
			map.addControl(scale);
			
			jQuery("#latlon_clear_button").click(function(e) {
				e.preventDefault();
				
				addedMarkers.clearMarkers();
			});
			
			jQuery("#latlon_button").click(function(e) {
				e.preventDefault();
				
				var latlon_string = jQuery("#add_latlon").val();
				var latlon_split = latlon_string.split(",", 2);
				if (latlon_split.length == 2)
					addPoint(latlon_split[0], latlon_split[1]);
			});
			
			jQuery("#trip_button").click(function(e) {
				e.preventDefault();
				
				var trip_name = jQuery("#trip_name").val();
				selectTrip(trip_name, null);
			});

			jQuery("#filter_apply").click(function(e) {
				e.preventDefault();
				
				var min = jQuery("#filter_start").val();
				var max = jQuery("#filter_end").val();
				showRecordsOnMap(min, max);
			});
		}
	};    
};

jQuery(document).ready(function() { new OBA.Debug().initialize(); });
/* ]]> */
</script>
</head>
<body style="position: relative;">

<p>
<a href="vehicle-location-simulation.do">Back to Vehicle Location Simulation Console</a>
</p>

<table>
<tr>
<td style="width: 410px;">
	All Routes:
	<br/>
	<select size="10" style="width: 450px;" id="routes">
		<option value="">Loading...</option>
	</select>

	Active Blocks For Selected Route:
	<br/>
	<select size="10" style="width: 450px;" id="blocks">
		<option value="">Select a route first.</option>
	</select>

	Trips In Selected Block:
	<br/>
	<select size="10" style="width: 450px;" id="trips">
		<option value="">Select a block first.</option>
	</select>
	<br/>
	Show trips active for this time:
	<br/>
	<input type="text" id="trip_time" size="25"/> 
	<br/>
	Show Records Between:
	<br/>
	<input type="text" id="filter_start" size="10"/> (record #) and <input type="text" id="filter_end" size="10"/> (record #)
	<br/>
	<input type="submit" value="Refresh" id="filter_apply"/>
	<br/>
	Show this trip:
	<br/>
	<input type="text" id="trip_name" size="40"/> 
	<br/>
	<input type="submit" value="Show Trip" id="trip_button"/>
	<br/>
	<input type="text" id="add_latlon" size="40"/> 
	<br/>
	<input type="submit" value="Add LatLon" id="latlon_button"/>
	<input type="submit" value="Clear" id="latlon_clear_button"/>
</td>
<td>
	<div id="map" style="width: 1500px; height: 1000px;"></div>
</td>
</tr>
</table>

</body>
</html>