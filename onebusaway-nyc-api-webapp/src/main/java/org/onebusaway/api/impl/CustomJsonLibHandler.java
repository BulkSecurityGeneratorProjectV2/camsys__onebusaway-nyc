/**
 * Copyright (C) 2011 Brian Ferris <bdferris@onebusaway.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.onebusaway.api.impl;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.rest.handler.ContentTypeHandler;
import org.codehaus.jackson.map.AnnotationIntrospector;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;
import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;

import java.io.IOException;
import java.io.Reader;
import java.io.Writer;

import javax.servlet.http.HttpServletRequest;

/**
 * Handles JSON content using json-lib
 */
public class CustomJsonLibHandler implements ContentTypeHandler {

  private ObjectMapper _mapper;

  public CustomJsonLibHandler() {
    super();
    
    _mapper = new ObjectMapper();
    
    /* use Jaxb annotation interceptor so we pick up autogenerated annotations from XSDs */
    AnnotationIntrospector jaxb = new JaxbAnnotationIntrospector();
    SerializationConfig config = _mapper.getSerializationConfig();
    config.setAnnotationIntrospector(jaxb);
  }
  
  public void toObject(Reader in, Object target) throws IOException {
    throw new IOException("Not implemented.");
  }

  public String fromObject(Object obj, String resultCode, Writer stream)
      throws IOException {

    String callback = null;
    HttpServletRequest req = ServletActionContext.getRequest();
    if (req != null)
      callback = req.getParameter("callback");

    fromObject(obj, resultCode, stream, callback);
    
    return null;
  }

  public String fromObject(Object obj, String resultCode, Writer stream, String callback)
      throws IOException {

    fromObject(obj, stream, callback);
    
    return null;
  }

  public void fromObject(Object obj, Writer stream, String callback)
      throws IOException {
    
    if(callback != null) {
      stream.write(callback);
      stream.write("(");
      stream.flush();
    }
    
    _mapper.writeValue(stream, obj);

    if(callback != null) {
      stream.write(")");
    }
    stream.flush(); 
  }

  public String getContentType() {
    return "text/javascript";
  }

  public String getExtension() {
    return "json";
  }
}
